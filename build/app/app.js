var app=angular.module("colorIpsum",["ngAnimate"]);app.controller("mainController",["$scope","coloripsum","$timeout",function(n,r,e){n.versionColor="#E52B50",n.version="1.7",n.scheme={main:"#000000",complementary:"#000000",dark:"#000000",light:"#000000",noHash:{main:"000000",complementary:"000000",dark:"000000",light:"000000"},luminocity:{main:1,complementary:1,dark:1,light:1},uiColors:{background:"#000000",hex:"#000000",texts:"#000000"}},n.rotate=!1;var t,o,a=function(){var t=null,e=window.location.pathname.split("/"),n=e[e.length-1];if(null!==n.match(/^(([a-fA-F0-9]){6})-(([a-fA-F0-9]){6})-(([a-fA-F0-9]){6})-(([a-fA-F0-9]){6})$/gi)){var r=n.split("-");t={main:"#"+r[0],complementary:"#"+r[1],dark:"#"+r[2],light:"#"+r[3],noHash:{main:r[0],complementary:r[1],dark:r[2],light:r[3]}}}return t}();n.scheme=null!==a?(t=a,s(o=r.generatePaletteFromURL(t),"Colors for devs"),o):c(),n.onKeyUp=function(t){32==t.keyCode&&(n.scheme=c())},n.generateRandom=function(t){n.rotate=!0,e(function(){n.rotate=!1},700),n.scheme=c()},n.generatePalette=function(t){return e=t,s(n=r.palette(e),"Colors for devs"),n;var e,n},n.buildInfo=function(){var t,e={mainHex:n.versionColor};n.versionScheme=(t=e,r.palette(t)),$("body").css("overflow","hidden"),$(".about").fadeIn(200),$(".about-container").show("drop",{direction:"down"},200,function(){$("body").css("overflow","auto")})},n.closeAbout=function(t){"panel about"===t.target.className&&($(".about").css("cursor","auto"),$("body").css("overflow","hidden"),$(".about").fadeOut(200),$(".about-container").hide("drop",{direction:"down"},200,function(){$("body").css("overflow","auto")}))},n.changeCursor=function(t){"panel about"===t.target.className?$(".about").css("cursor","url(assets/images/close.gif), crosshair"):$(".about").css("cursor","auto")},n.selectHexString=function(t){var e,n,r=t.currentTarget.className,o=document.getElementsByClassName(r)[0];window.getSelection?(n=window.getSelection(),(e=document.createRange()).selectNodeContents(o),n.removeAllRanges(),n.addRange(e)):document.body.createTextRange&&((e=document.body.createTextRange()).moveToElementText(o),e.select())};var i=new Clipboard(".color");function c(){var t=r.random();return s(t,"Colors for devs"),t}function s(t,e){var n=window.location.pathname.split("/"),r="/"+n[n.length-1],o="/"+t.noHash.main+"-"+t.noHash.complementary+"-"+t.noHash.dark+"-"+t.noHash.light;o===r?history.replaceState({scheme:t},e):history.pushState({scheme:t},e,o)}i.on("success",function(t){var e=$(t.trigger).attr("class").replace(" color","");$("."+e+".hex .hint")[0]||$("."+e+".hex").append('<span class="hint">copied to clipboard</span>').show(function(){$(".hint").fadeOut(1e3,function(){$(this).remove()})})}),i.on("error",function(t){var e=$(t.trigger).attr("class").replace(" color","");$("."+e+".hex .hint")[0]||$("."+e+".hex").append('<span class="hint">ctrl+c to copy</span>').show(function(){$(".hint").fadeOut(1e3,function(){$(this).remove()})})}),window.onpopstate=function(t){null!==t.state&&n.$apply(function(){n.scheme=t.state.scheme})}}]),app.directive("spectrum",function(){return{restrict:"A",link:function(r,e,t){$(e).spectrum(r.$eval(t.spectrum)),$(e).on("reflow.spectrum",function(t){var e,n,r,o,a,i,c,s;e=$(".sp-container"),n=$(".sp-replacer"),r=e.outerWidth(),o=e.outerHeight(),a=n.outerHeight(),i=e[0].ownerDocument,c=i.documentElement.clientWidth+$(i).scrollLeft(),(s=n.offset()).left+=84,s.top+=a,s.left=s.left+r>c&&r<c?Math.abs(s.left-r):s.left,s.top=Math.abs(s.top-42-o/2),e.css({left:s.left,top:s.top})}),$(e).on("change.spectrum",function(t,e){var n={mainHex:e.toHexString()};r.$apply(function(){r.scheme=r.generatePalette(n)})}),r.$watch("scheme",function(t){$(e).spectrum("set",t.main),$(".sp-preview").css({color:t.uiColors.texts}),$(".sp-preview").css({background:t.main})})}}}),app.directive("setFocus",function(){return{restrict:"A",link:function(t,e,n){e[0].focus()}}}),app.service("coloripsum",function(){var r=this,o=function(){return{main:"",complementary:"",dark:"",light:"",noHash:{main:"",complementary:"",dark:"",light:""},luminocity:{main:"",complementary:"",dark:"",light:""},uiColors:{background:"",hex:"",texts:""}}};function a(t,e){var n,r,o,a,i,c,s="";return u(t)<=.5?(a=t,i=e,(c={}).r=Math.round(2*a.r*i.r/255),c.g=Math.round(2*a.g*i.g/255),c.b=Math.round(2*a.b*i.b/255),c.a=i.a,s=l(c,a)):(n=t,r=e,(o={}).r=Math.round(255*(1-(1-n.r/255)*(1-(2*r.r/255-1)))),o.g=Math.round(255*(1-(1-n.g/255)*(1-(2*r.g/255-1)))),o.b=Math.round(255*(1-(1-n.b/255)*(1-(2*r.b/255-1)))),o.a=r.a,s=l(o,n)),s}function u(t){return(t.r+t.g+t.b)/3/255}function l(t,e){var n,r,o,a={};return a.r=(1-t.a)*e.r+t.a*t.r,a.g=(1-t.a)*e.g+t.a*t.g,a.b=(1-t.a)*e.b+t.a*t.b,n=a.r,r=a.g,o=a.b,"#"+s(n)+s(r)+s(o)}function i(t,e){var n,r,o;return{r:(o=t,parseInt(c(o).substring(0,2),16)),g:(r=t,parseInt(c(r).substring(2,4),16)),b:(n=t,parseInt(c(n).substring(4,6),16)),a:e}}function c(t){return"#"==t.charAt(0)?t.substring(1,7):t}function s(t){return t=parseInt(t,10),isNaN(t)?"00":(t=Math.max(0,Math.min(t,255)),"0123456789ABCDEF".charAt((t-t%16)/16)+"0123456789ABCDEF".charAt(t%16))}function m(t){var e=Math.random(),n="#EEEEEE";t&&(n="#777777",e=-e);var r=parseInt(n.slice(1),16),o=e<0?0:255,a=e<0?-1*e:e,i=r>>16,c=r>>8&255,s=255&r;return"#"+(16777216+65536*(Math.round((o-i)*a)+i)+256*(Math.round((o-c)*a)+c)+(Math.round((o-s)*a)+s)).toString(16).slice(1)}function h(t,e,n){return l(i(t,e),i(n,1))}function p(t,e,n){var r=i(t,e);return a(i(n,1),r)}function d(t){return u(i(t,1))}function f(t){var e={};return e.background=h(t,.1,"#FFFFFF"),e.hex=h(t,.6,e.background),.85<d(e.background)&&.85<d(e.hex)&&(e.hex=h(e.hex,.9,"#424242")),e.texts=p(t,.2,"#424242"),e}function g(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}this.random=function(){var t=function(){var t="";for(;t.length<6;)t+=Math.random().toString(16).substr(-6).substr(-1);return"#"+t}(),e=m(!0),n=m(!1);return r.palette({mainHex:t,darkHex:e,lightHex:n})},this.palette=function(t){var e=g({mainHex:"#FFFFFF",darkHex:"#424242",lightHex:"#FAFAFA"},t),n=new o;return n.main=e.mainHex,n.noHash.main=c(n.main).toUpperCase(),n.luminocity.main=d(n.main),n.complementary=function(t){var e=(0+(16777215-(n=t,t=parseInt(n.replace(/^#/,""),16))).toString(16)).slice(-6);var n;for(;e.length<6;)e="0"+e;return"#"+e}(e.mainHex),n.noHash.complementary=c(n.complementary).toUpperCase(),n.luminocity.complementary=d(n.complementary),n.dark=p(e.mainHex,.2,e.darkHex),n.noHash.dark=c(n.dark).toUpperCase(),n.luminocity.dark=d(n.dark),n.light=p(e.mainHex,.2,e.lightHex),n.noHash.light=c(n.light).toUpperCase(),n.luminocity.light=d(n.light),n.uiColors=g(n.uiColors,f(n.main)),n},this.generatePaletteFromURL=function(t){var e=g(new o,t);return e.luminocity.main=d(e.main),e.luminocity.complementary=d(e.complementary),e.luminocity.dark=d(e.dark),e.luminocity.light=d(e.light),e.uiColors=g(e.uiColors,f(e.main)),e},this.hexToRGBA=function(t,e){return i(t,e)},this.rgbaToHex=function(t,e){return l(t,e)},this.hexOpacity=function(t,e,n){return h(t,e,n)},this.hexBlendOverlay=function(t,e,n){return p(t,e,n)},this.hexLuminocity=function(t){return d(t)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
